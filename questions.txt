is three.js left or right handed?

when grouping objects and changing the scale of the group, can we read world scale (instead of the relative scale)?

how does window pixel ratio work when a window is between 2 screens?

(domelement).requestFullscreen is this javascript/web api or a three.js function?

what are UV Coordinates? 2 vertices?

is Image() a js class or three class?

what exactly is min and mag filter?

what happens exactly if you have an image texture that's not a power of 2?

how is the shadow camera applies to create the actual shadows?

why does gltfloader remove scene children when you add a mesh to the scene

how does it work to deploy stuff written on glitch, relative script paths?

standard size/scale of units in three.js scenes vs blender?

what does controls.update do?

how does the textureloader know to apply srgb, how does it happen automatically

does requestAnimationFrame delay by 1 frame? call function on next frame?

why don't we need function in front of functions in a class

is fragment shader for each pixel on the screen or is it tied to geometry?
    
--------------------------

in chapter 8 bruno says we can't do: 
    if (!(document.fullscreenElement || document.webkitFullscreenElement))
instead we need to assign it to a variable and do
    const fullscreenElement = document.fullscreenElement || document.webkitFullscreenElement;
    if (!fullscreenElement)
why?
    - Bruno doesn't know, might be a runor

performance advantages of r3f
    components instead of verbose manual Coordinates
    everything is easier

do you know why people use gsap instead of the build-in tween
    gsap more well documented, more functions

blender - are areas sensitive based on mouse hover or selected area?
    hover
    
blender - are areas sensitive based on mouse hover or selected area?
    hover


in lesson 26 bruno explains how we lose the context if we do 
    constructor(canvas)
    {
        console.log("here starts a great experience");

        //options
        this.canvas = canvas;

        this.sizes = new Sizes();
        this.sizes.on("resize", this.resize);
    }

    resize()
    {
        console.log(this.sizes.width);
        console.log("A resize occured");
    }
instead of passing resize into this.sizes.on, we need to pass it an arrow function and call that function. 
We also can't use function, need to use arrow. 
Why?
    Because the parameters, and this, are not stored with normal functions. Fat arrow creates a function and automatically binds the parameters